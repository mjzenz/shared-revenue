---
title: "Shared Revenue"
author: "Michael J Zenz"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: html
editor: visual
---

## Shared Revenue is Redistributive

```{r, setup}
#| echo: false
#| warning: false
#| message: false


##This R scrip uploads shared revenue data, processes, and provides analyses

library(tidyverse)
library(rvest)

###Process shared revenue data input

#Read in .csv data with shared revenue and income/sales tax data by county
#This was provided by the WI Legislative Fiscal Bureau at the request of Rep. Francesca Hong 
shared.revenue.data.unprocessed <-  read_csv("Shared_Rev_Data.csv")

#Converts values given in milions.
shared.revenue.data <- shared.revenue.data.unprocessed %>%
                        mutate(`Net Individual Income Tax` = `Net Individual Income Tax` * 1000000, 
                               `State Sales Tax Collections` =  `State Sales Tax Collections`  * 1000000)

#Scrapes county population and area data from wikipedia table
wiki.county.table <- rvest::read_html("https://en.wikipedia.org/wiki/List_of_counties_in_Wisconsin") %>%
            rvest::html_node(., ".wikitable") %>%
     rvest::html_table(., fill = TRUE)

#Removes "county" from county names and renames variables.
county.pop.area <- wiki.county.table %>%
                    mutate(County = substr(County, 1,str_length(County)-7)) %>%
                  select(County, Population = `Population[2]`, Area = `Area[2]`)

#Removes commas from population values
county.pop.area$Population <- as.numeric(gsub("[\\,]","",county.pop.area$Population))

#Scrapes WI 2020 presidential election values from wikipedia
wiki.trump.vote.table <- rvest::read_html("https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_Wisconsin") %>%
  html_nodes(.,"table")
wiki.trump.vote.table <-html_table(wiki.trump.vote.table[35], fill = TRUE)[[1]] 

#Keep Trump 2020 vote share.
trump.vote.prop.table <- wiki.trump.vote.table[-1,c(1,4)] %>%
                      rename(Trump_2020_Prop = Trump) %>%
                      mutate(Trump_2020_Prop = as.numeric(substr(Trump_2020_Prop, 1, 
                                                      str_length(Trump_2020_Prop)-1))/100)

#Process data and make further calculations.
data <- shared.revenue.data %>%
        left_join(county.pop.area, by = "County") %>%
        left_join(trump.vote.prop.table, by = "County") %>%
        mutate(`Area (sq mi)` = as.numeric(str_replace_all(str_extract(Area, "\\d+[\\d,.]*"), ",", "")) ,
               `Density (pop sq mi)` = Population/`Area (sq mi)`,
                `Combined Tax` = `Net Individual Income Tax` + `State Sales Tax Collections`,
               `Tax Prop Shared Revenue` = (`Combined Tax`/sum(`Combined Tax`)) * sum(`Total Shared Revenue`),
               `Total Shared Revenue Overage` = `Total Shared Revenue` - `Tax Prop Shared Revenue`,
               `Per capita Shared Revenue Overage` =  `Total Shared Revenue Overage` / Population,
               `Per capita Income Tax` = `Net Individual Income Tax`/Population,
               `Per capita Combined Tax` = `Combined Tax`/Population,
               `2020 Trump Majority` = Trump_2020_Prop > .5 
               )

rm(county.pop.area, shared.revenue.data, shared.revenue.data.unprocessed, trump.vote.prop.table,
   wiki.county.table, wiki.trump.vote.table)



#Linear Regression model for population and amount of shared revenue.
income.lm <- lm(`Per capita Shared Revenue Overage` ~ log(`Per capita Income Tax`), data = data)
#summary(income.lm)

income.lm.no_outlier <- lm(`Per capita Shared Revenue Overage` ~ log(`Per capita Income Tax`), 
                           data = data[which(log(data$`Per capita Income Tax`)>6),])
#summary(income.lm.no_outlier)

population.lm <- lm(`Total Shared Revenue` ~ Population, data)
#summary(population.lm)
population.lm.log <-  lm(log(`Total Shared Revenue`) ~ log(Population), data)
#summary(population.lm.log)

intercept <- coef(population.lm.log)[1]
slope <- coef(population.lm.log)[2]

```

During the spring and summer of 2023 leaders in the Wisconsin legislature along with Governor Evers proposed changes to county and municipal aid, which is a small part of the total state tax procedes shared with local governments. This "shared revenue" is collected primarily through state income and sales taxes and are redistributed to county and municipal governments to help them fund the various services that are typically provided by local rather than state government.

Despite [a complex formula](https://docs.legis.wisconsin.gov/misc/lfb/informational_papers/january_2017/0018_shared_revenue_program_informational_paper_18.pdf) for calculating the level of shared revenue, **population largely determines the level of shared revenue that each county receives**.

```{r, population_graph}
#| echo: false
#| warning: false


ggplot(data = data, aes(x = log(Population), y = log(`Total Shared Revenue`))) + 
            geom_point(aes(color = `2020 Trump Majority`)) +
  scale_colour_manual(values = c("blue", "red")) + 
  geom_abline(slope = slope, intercept = intercept) + 
  labs(title = "WI County (and municipal) Shared Revenue by Population",
       x = "Population (log)", y = "Shared Revenue in $ (log)") +
theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x =element_blank() , 
        axis.text.y = element_blank() , 
        axis.ticks.y = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank())



```

Individuals are given roughly equal allocations regardless of where they live, but this can result in local governments receiving proportionally less money in shared revenue than their residents pay in. Richer countries tend to receive less than they pay in, and poorer counties more.

```{r, diff_prop_shared_rev_graph, fig.height = 13 , fig.width = 7}
#| echo: false
#| warning: false

ggplot(data = data, aes(y = reorder(County,`Per capita Combined Tax`) , x = `Per capita Shared Revenue Overage`)) +
  scale_fill_manual(values = c("blue", "red")) + 
  geom_bar(aes(fill = `2020 Trump Majority`), stat = "identity") +
  theme_minimal() +
labs(title = "Per Capita Shared Revenue Over Proportional Tax",
     subtitle = "Ordered by per-capita tax (higher tax procedes at top)",
       x = "Per Capita $", y = "") +     
  theme(legend.position="bottom")
  
    
```
